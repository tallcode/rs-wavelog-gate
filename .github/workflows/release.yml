name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags (v1.0.0, etc.)

permissions:
  contents: write

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            artifact_name: rs-wavelog-gate-macos
            asset_name: rs-wavelog-gate
            bundle_name: "WavelogGate.app"
          - os: windows-latest
            artifact_name: rs-wavelog-gate-windows
            asset_name: rs-wavelog-gate.exe

    steps:
      - uses: actions/checkout@v4
      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-cargo-
      
      - name: Install cargo-bundle (macOS)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          if ! cargo-bundle --version >/dev/null 2>&1; then
            echo "Installing cargo-bundle..."
            cargo install cargo-bundle --force
          else
            echo "cargo-bundle already installed, skipping installation"
          fi

      - name: Install cargo-edit
        shell: bash
        run: |
          if ! cargo set-version --version >/dev/null 2>&1; then
            echo "Installing cargo-edit..."
            cargo install cargo-edit --force
          else
            echo "cargo-edit already installed, skipping installation"
          fi 

      - name: Update version from tag
        run: |
          VERSION=${GITHUB_REF_NAME#v}
          echo "Updating version to: $VERSION"
          cargo set-version $VERSION
        shell: bash
        

      - name: Build release binary
        run: |
          cargo build --profile release

      - name: Create macOS app bundle with icon
        if: matrix.os == 'macos-latest'
        run: cargo bundle --release

      - name: Upload macOS app bundle
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
            name: ${{ matrix.artifact_name }}
            path: target/release/bundle/osx/${{ matrix.bundle_name }}

      - name: Upload Windows executable
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
            name: ${{ matrix.artifact_name }}
            path: target/release/${{ matrix.asset_name }}

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
      
      - name: Prepare macOS app bundle
        run: |
          zip -r rs-wavelog-gate-macos.zip rs-wavelog-gate-macos
      
      - name: Prepare Windows executable
        run: |
          chmod +x rs-wavelog-gate-windows/rs-wavelog-gate.exe
          zip rs-wavelog-gate-windows.zip rs-wavelog-gate-windows/rs-wavelog-gate.exe
      
      - name: Publish built binaries to GitHub releases
        run: |
          gh release create ${{ github.ref_name }} \
            --generate-notes \
            rs-wavelog-gate-macos.zip#"macOS App Bundle" \
            rs-wavelog-gate-windows.zip#"Windows Executable"
        env:
          GH_TOKEN: ${{ github.token }}